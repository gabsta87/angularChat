Calculer des clusters 
    https://medium.com/@joaogabriellima/clustering-with-javascript-part-3-clustering-algorithms-in-practice-75631b241917
    trouver des clusters ou l'utilisateur a participé à des événements
    chercher des corrélations entre les clusters et le type d'événements
    définir un rayon max selon le type d'activité

    rechercher les événements dans le rayon max défini autour de chaque cluster
    selon les activités pratiquées dans les clusters

    IA ne serait pas efficace car pas assez de données pour l'entrainer. En revanche,
    l'IA pourrait être entraînée avec les données générées par l'algorithme

Scroll infini vers le haut : 
    https://ionicframework.com/docs/api/refresher

Concernant les cartes
    https://www.storemapper.com/blog/google-maps-api-alternative/
    https://www.mapbox.com/

    https://medium.com/@timo.baehr/using-mapbox-in-angular-application-bc3b2b38592

    MAPBOX
        Markers : https://docs.mapbox.com/help/getting-started/add-markers/
        Events : https://docs.mapbox.com/mapbox-gl-js/api/events/
        Pour estimer les temps de trajet sur mapbox : https://docs.mapbox.com/help/tutorials/get-started-isochrone-api/
        Différents plugins : https://docs.mapbox.com/mapbox-gl-js/plugins/

ID unique
    npm uuid

Encryption : openpgp.js, cryptojs
    Ou simple : environment : token.stringify puis .encode
    créer un fichier utils.js à la racine du projet avec les fonctions d'encodage/decodage
    coller la fonction d'encodage dans le navigateur
    encoder la variable d'environment et mettre le résultat dans environment
    dans appmodule, modifier la ligne 
        provideFirebaseApp(() => initializeApp(environment.firebase)),
    pour insérer initializeApp(decode(environment.firebase))


Observables :
    https://nicolasfazio.ch/programmation/angular/angular-creer-service-reactif-observables

Pipes sur Observables
// let finalData = activitiesList.pipe(
//   tap(e=>console.log("e = ",e)),
//   map((value:any[]) => {
//     return value.map((elem)=>{
//       const {userId,...data} = elem
//       return data;
//     })
//   })
// );